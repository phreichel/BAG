#include "scanner.hpp"
#include <iostream>

//-------------------------------------------------------------------------------
Scanner::Scanner(istream& ins) {
    this->_look = '\0';
    this->_symbol = 0;
    this->_status = 0;
    this->_ins = &ins;
};
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
Scanner::~Scanner() {};
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::next() {
    
    if (this->_status != 0)
        return false;

    if (this->_ins->eof()) {
        this->_status = 1;
        return true;
    }
        
    if (this->_ins->good()) {
        this->_ins->read(&this->_look, 1);
        if (this->_ins->good()) {
            cout << "TOKEN: " << this->_look << endl;
            return true;
        } else {
            this->_status = 2;
            cout << "Invalid Read" << endl;
            return false;
        }
    }

    return false;

}
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
char Scanner::look() const {
    return this->_look;
};
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
int Scanner::symbol() const {
    return this->_symbol;
};
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
int Scanner::status() const {
    return this->_status;
};
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::isLower() const {
    char cmp = this->look();
    return
        cmp >= 'a' &&
        cmp <= 'z';
};
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::isUpper() const {
    char cmp = this->look();
    return
        cmp >= 'A' &&
        cmp <= 'Z';
};
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::isAlpha() const {
    return
        this->isUpper() ||
        this->isLower();
}
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::isBinary() const {
    char cmp = this->look();
    return
        cmp == '0' ||
        cmp == '1';
}
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::isOctal() const {
    char cmp = this->look();
    return
        cmp >= '0' &&
        cmp <= '7';
}
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::isDecimal() const {
    char cmp = this->look();
    return
        cmp >= '0' &&
        cmp <= '9';
}
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::isHexadecimal() const {
    char cmp = this->look();
    return
        this->isDecimal() ||
        cmp >='a' && cmp <= 'f' ||
        cmp >='A' && cmp <= 'F';
}
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::isWhitespace() const {
    char cmp = this->look();
    return
        cmp == ' ' ||
        cmp == '\t' ||
        cmp == '\r';
}
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
bool Scanner::isNewline() const {
    char cmp = this-> look();
    return cmp == '\n';
}
//-------------------------------------------------------------------------------

