#include "Trie.h"

//=================================================================================
using namespace std;
//=================================================================================

//=================================================================================
namespace phi {
//=================================================================================

//=================================================================================
Trie::Trie() {};
//=================================================================================

//=================================================================================
Trie::~Trie() {};
//=================================================================================

//=================================================================================
void Trie::add(const string& entry) {
	TrieNode* node = &root;
	for (auto i=entry.begin(); i!=entry.end(); ++i) {
		auto child = node->map.find(*i);
		if (child == node->map.end()) {
			TrieNode* newNode = new TrieNode();
			node->map[*i] = newNode;
			node = newNode;
		} else {
			node = child->second;
		}
	}
	node->end = true;
}
//=================================================================================

//=================================================================================
void Trie::del(const string& entry) {
	TrieNode* node = &root;
	for (auto i=entry.begin(); i!=entry.end(); ++i) {
		auto child = node->map.find(*i);
		if (child == node->map.end()) {
			return;
		} else {
			node = child->second;
		}
	}
	node->end = false;
}
//=================================================================================

//=================================================================================
bool Trie::has(const string& entry) const {
	const TrieNode* node = &root;
	for (auto i=entry.begin(); i!=entry.end(); ++i) {
		auto child = node->map.find(*i);
		if (child == node->map.end()) {
			return false;
		} else {
			node = child->second;
		}
	}
	return node->end;
}
//=================================================================================

//=================================================================================
};
//=================================================================================
