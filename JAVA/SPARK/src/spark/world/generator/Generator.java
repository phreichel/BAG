//*********************************************************************************************************************
package spark.world.generator;
//*********************************************************************************************************************

import java.nio.ByteBuffer;
import java.util.zip.CRC32;

import javax.vecmath.Vector3f;

import spark.world.generated.Generated;

//*********************************************************************************************************************
public abstract class Generator<G extends Generated<?>> {

	//=================================================================================================================
    private CRC32 crc32 = new CRC32();
    private ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES + 3 * Double.BYTES);
	//=================================================================================================================
	
	//=================================================================================================================
	public void generate(G generated) {
		
	}
	//=================================================================================================================

	//=================================================================================================================
	protected long generateDerivedSeed(long seed, Vector3f location) {

		buffer.clear();
        buffer.putLong(seed);
        buffer.putDouble(location.x);
        buffer.putDouble(location.y);
        buffer.putDouble(location.z);
        
        crc32.update(buffer.array());
        long newSeed = crc32.getValue();
        return newSeed;
        
	}
	//=================================================================================================================
	
}
//*********************************************************************************************************************
