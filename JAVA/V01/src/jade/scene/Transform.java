//**************************************************************************************************
package jade.scene;
//**************************************************************************************************

import javax.vecmath.Matrix4f;

import jade.render.Renderer;
import lombok.Getter;

//**************************************************************************************************
public class Transform extends Node {

	//==============================================================================================
	@Getter private Matrix4f relative = new Matrix4f();
	//==============================================================================================

	//==============================================================================================
	public Transform() {
		relative.setIdentity();
	}
	//==============================================================================================
	
	//==============================================================================================
	public void setRelative(Matrix4f rel) {
		this.relative.set(rel);
	}
	//==============================================================================================

	//==============================================================================================
	public void setTranslation(float x, float y, float z) {
		this.relative.m03 = x;
		this.relative.m13 = y;
		this.relative.m23 = z;
	}
	//==============================================================================================
	
	//==============================================================================================
	public void addTranslation(float dx, float dy, float dz) {
		this.relative.m03 += dx;
		this.relative.m13 += dy;
		this.relative.m23 += dz;
	}
	//==============================================================================================	

	//==============================================================================================
	public void addLocalTranslation(float x, float y, float z) {
		// multiply with transposed rotation part of the local matrix.
		x = x * this.relative.m00 + y * this.relative.m10 + z * this.relative.m20;
		y = x * this.relative.m01 + y * this.relative.m11 + z * this.relative.m21;
		z = x * this.relative.m02 + y * this.relative.m12 + z * this.relative.m22;
		addTranslation(x, y, z);
	}
	//==============================================================================================

	//==============================================================================================
	protected void renderNodePre(Renderer renderer) {
		renderer.pushTransform(this.getRelative());
	}
	//==============================================================================================

	//==============================================================================================
	protected void renderNodePost(Renderer renderer) {
		renderer.popTransform();
	}
	//==============================================================================================
	
}
//**************************************************************************************************
