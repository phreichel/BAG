//**************************************************************************************************
package jade.gui;
//**************************************************************************************************

import java.util.Collections;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import javax.vecmath.Point2f;
import javax.vecmath.Vector2f;

import jade.render.Renderer;
import lombok.Getter;

//**************************************************************************************************
public class Widget {

	//==============================================================================================
	@Getter protected Point2f position = new Point2f();
	@Getter protected Vector2f size = new Vector2f();
	//==============================================================================================
	
	//==============================================================================================
	@Getter protected Widget parent;
	protected List<Widget> children = new LinkedList<>(); 
	private List<Widget> readonlyChildren = Collections.unmodifiableList(children); 
	protected Set<Flag> flags = EnumSet.of(Flag.DISPLAYED); 
	private Set<Flag> readonlyFlags = Collections.unmodifiableSet(flags); 
	//==============================================================================================

	//==============================================================================================
	public void setPosition(Point2f pos) {
		position.set(pos);
	}
	//==============================================================================================

	//==============================================================================================
	public void addPosition(Point2f pos) {
		position.add(pos);
	}
	//==============================================================================================

	//==============================================================================================
	public void setPosition(float x, float y) {
		position.set(x, y);
	}
	//==============================================================================================

	//==============================================================================================
	public void addPosition(float x, float y) {
		position.x += x;
		position.y += y;
	}
	//==============================================================================================
	
	//==============================================================================================
	public void setSize(Vector2f s) {
		size.set(s);
	}
	//==============================================================================================

	//==============================================================================================
	public void addSize(Vector2f s) {
		size.add(s);
	}
	//==============================================================================================

	//==============================================================================================
	public void setSize(float x, float y) {
		size.set(x, y);
	}
	//==============================================================================================
	
	//==============================================================================================
	public void addSize(float x, float y) {
		size.x += x;
		size.y += y;
	}
	//==============================================================================================
	
	//==============================================================================================
	public List<Widget> getChildren() {
		return readonlyChildren;
	}
	//==============================================================================================

	//==============================================================================================
	public Widget addChild(Widget child) {
		if (child.parent != null) {
			child.parent.removeChild(child);
		}
		child.parent = this;
		children.add(child);
		return this;
	}
	//==============================================================================================

	//==============================================================================================
	public void removeChild(Widget child) {
		if (children.remove(child)) {
			child.parent = null;
		}
	}
	//==============================================================================================
	
	//==============================================================================================
	public Set<Flag> getFlags() {
		return readonlyFlags;
	}
	//==============================================================================================

	//==============================================================================================
	public Widget setFlag(Flag flag, boolean set) {
		if (set)
			flags.add(flag);
		else
			flags.remove(flag);
		return this;
	}
	//==============================================================================================
	
	//==============================================================================================
	public void render(Renderer renderer) {
		if (flags.contains(Flag.DISPLAYED)) {
			renderWidgetPre(renderer);
			renderChildren(renderer);
			renderWidgetPost(renderer);
		}
	}
	//==============================================================================================

	//==============================================================================================
	protected void renderWidgetPre(Renderer renderer) {
		renderer.pushTranslate(position);
		renderWidget(renderer);
	}
	//==============================================================================================

	//==============================================================================================
	protected void renderWidgetPost(Renderer renderer) {
		renderer.popTranslate();
	}
	//==============================================================================================

	//==============================================================================================
	protected void renderWidget(Renderer renderer) {
		renderer.setColor(0, 0, .2f);
		renderer.fillRectangle(0, 0, size.x, size.y);
		renderer.setColor(.5f, .5f, .9f);
		renderer.drawRectangle(0, 0, size.x, size.y);
	}
	//==============================================================================================
	
	//==============================================================================================
	protected void renderChildren(Renderer renderer) {
		for (Widget child : getChildren()) {
			child.render(renderer);
		}
	}
	//==============================================================================================

	//==============================================================================================
	public void handleEvent(Event event) {
		if (getFlags().contains(Flag.DISPLAYED)) {
			containsPointer(event);
			handleWidget(event);
			handleChildren(event);
		}
	}
	//==============================================================================================

	//==============================================================================================
	protected void handleWidget(Event event) {}
	//==============================================================================================
	
	//==============================================================================================
	protected void handleChildren(Event event) {
		for (Widget child : getChildren()) {
			event.getLocalPointerPositon().sub(child.getPosition());
			child.handleEvent(event);
			event.getLocalPointerPositon().add(child.getPosition());
		}
	}
	//==============================================================================================

	//==============================================================================================
	protected void containsPointer(Event event) {
		Vector2f ptrpos = event.getLocalPointerPositon();
		boolean containsPointer =
			(ptrpos.x >= 0f) &&
			(ptrpos.y >= 0f) &&
			(ptrpos.x <= size.x) &&
			(ptrpos.y <= size.y);
		setFlag(Flag.POINTED_AT, containsPointer);
	}
	//==============================================================================================
	
}
//**************************************************************************************************
