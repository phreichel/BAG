//************************************************************************************************
package core.gui;
//************************************************************************************************

import core.api.ICanvas;
import core.api.IGameHandler;
import core.clock.ITask;
import core.event.GameEvent;
import core.platform.IGraphics;
import core.platform.PlatformEventType;

//************************************************************************************************
public class GuiManager implements ICanvas, IGameHandler, ITask {

	//============================================================================================
	private Theme theme = Theme.DEFAULT_THEME;
	//============================================================================================
	
	//============================================================================================
	private final Root root;
	//============================================================================================

	//============================================================================================
	public GuiManager() {
		this.root = createRoot();
	}
	//============================================================================================

	//============================================================================================
	public Theme getTheme() {
		return theme;
	}
	//============================================================================================

	//============================================================================================
	public void setTheme(Theme theme) {		
		if (theme == null) theme = Theme.DEFAULT_THEME;
		this.theme = theme;
	}
	//============================================================================================
	
	//============================================================================================
	public Root getRoot() {
		return root;
	}
	//============================================================================================

	//============================================================================================
	public void onPaint(IGraphics graphics) {
		this.root.updateLayout(graphics);
		this.root.onPaint(graphics);
	}
	//============================================================================================

	//============================================================================================
	@Override
	public void onGameEvent(GameEvent e) {
		if (e.type.equals(PlatformEventType.RESIZE)) {
			var data = (float[]) e.data;
			root._setOuterExtent(data[0], data[1]);
		}
		root.onGameEvent(e);
	}
	//============================================================================================

	//============================================================================================
	private Root createRoot() {
		var root = new Root(this);
		root._setLayout(RootLayout.INSTANCE);
		return root;
	}
	//============================================================================================

	//============================================================================================
	public Layer createLayer() {
		var layer = new Layer(this);
		return layer;
	}
	//============================================================================================

	//============================================================================================
	public Label createLabel(String text) {
		var label = new Label(this);
		label.setText(text);
		return label;
	}
	//============================================================================================
	
	//============================================================================================
	@Override
	public void update(int nFrames, long periodNs) {
		this.root.update(nFrames, periodNs);
	}
	//============================================================================================
	
}
//************************************************************************************************
