#ifndef __trie_h__
#define __trie_h__

#include <string>
#include <unordered_map>

//=====================================================================================
using namespace std;
//=====================================================================================

//=====================================================================================
namespace phi {
//=====================================================================================

//=====================================================================================
class TrieNode {

        public:

        unordered_map<char, TrieNode*> map;
        bool end = false;

        ~TrieNode() {
                for (auto i=map.begin(); i != map.end(); ++i) {
                        auto node = i->second;
                        i = map.erase(i);
                        delete node;
                }
        }

};
//=====================================================================================

//=====================================================================================
class Trie {

	public:

	Trie();
	~Trie();

	void add(const string& entry);
	void del(const string& entry);
	bool has(const string& entry) const;

	private:

	TrieNode root;

};
//=====================================================================================

//=====================================================================================
}; // namespace phi
//=====================================================================================

#endif
